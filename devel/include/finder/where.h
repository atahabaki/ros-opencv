// Generated by gencpp from file finder/where.msg
// DO NOT EDIT!


#ifndef FINDER_MESSAGE_WHERE_H
#define FINDER_MESSAGE_WHERE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace finder
{
template <class ContainerAllocator>
struct where_
{
  typedef where_<ContainerAllocator> Type;

  where_()
    : cx(0)
    , cy(0)
    , distance(0.0)
    , angle(0.0)  {
    }
  where_(const ContainerAllocator& _alloc)
    : cx(0)
    , cy(0)
    , distance(0.0)
    , angle(0.0)  {
  (void)_alloc;
    }



   typedef uint64_t _cx_type;
  _cx_type cx;

   typedef uint64_t _cy_type;
  _cy_type cy;

   typedef float _distance_type;
  _distance_type distance;

   typedef float _angle_type;
  _angle_type angle;





  typedef boost::shared_ptr< ::finder::where_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::finder::where_<ContainerAllocator> const> ConstPtr;

}; // struct where_

typedef ::finder::where_<std::allocator<void> > where;

typedef boost::shared_ptr< ::finder::where > wherePtr;
typedef boost::shared_ptr< ::finder::where const> whereConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::finder::where_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::finder::where_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::finder::where_<ContainerAllocator1> & lhs, const ::finder::where_<ContainerAllocator2> & rhs)
{
  return lhs.cx == rhs.cx &&
    lhs.cy == rhs.cy &&
    lhs.distance == rhs.distance &&
    lhs.angle == rhs.angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::finder::where_<ContainerAllocator1> & lhs, const ::finder::where_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace finder

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::finder::where_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::finder::where_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::finder::where_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::finder::where_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::finder::where_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::finder::where_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::finder::where_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1fa8de026066c3b6956b884103782c6e";
  }

  static const char* value(const ::finder::where_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1fa8de026066c3b6ULL;
  static const uint64_t static_value2 = 0x956b884103782c6eULL;
};

template<class ContainerAllocator>
struct DataType< ::finder::where_<ContainerAllocator> >
{
  static const char* value()
  {
    return "finder/where";
  }

  static const char* value(const ::finder::where_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::finder::where_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 cx\n"
"uint64 cy\n"
"float32 distance\n"
"float32 angle\n"
;
  }

  static const char* value(const ::finder::where_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::finder::where_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cx);
      stream.next(m.cy);
      stream.next(m.distance);
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct where_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::finder::where_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::finder::where_<ContainerAllocator>& v)
  {
    s << indent << "cx: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.cx);
    s << indent << "cy: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.cy);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FINDER_MESSAGE_WHERE_H
